/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bookmark } from "./Bookmark";
import { BookmarkCountArgs } from "./BookmarkCountArgs";
import { BookmarkFindManyArgs } from "./BookmarkFindManyArgs";
import { BookmarkFindUniqueArgs } from "./BookmarkFindUniqueArgs";
import { CreateBookmarkArgs } from "./CreateBookmarkArgs";
import { UpdateBookmarkArgs } from "./UpdateBookmarkArgs";
import { DeleteBookmarkArgs } from "./DeleteBookmarkArgs";
import { BookmarkService } from "../bookmark.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bookmark)
export class BookmarkResolverBase {
  constructor(
    protected readonly service: BookmarkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bookmark",
    action: "read",
    possession: "any",
  })
  async _bookmarksMeta(
    @graphql.Args() args: BookmarkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bookmark])
  @nestAccessControl.UseRoles({
    resource: "Bookmark",
    action: "read",
    possession: "any",
  })
  async bookmarks(
    @graphql.Args() args: BookmarkFindManyArgs
  ): Promise<Bookmark[]> {
    return this.service.bookmarks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bookmark, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bookmark",
    action: "read",
    possession: "own",
  })
  async bookmark(
    @graphql.Args() args: BookmarkFindUniqueArgs
  ): Promise<Bookmark | null> {
    const result = await this.service.bookmark(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bookmark)
  @nestAccessControl.UseRoles({
    resource: "Bookmark",
    action: "create",
    possession: "any",
  })
  async createBookmark(
    @graphql.Args() args: CreateBookmarkArgs
  ): Promise<Bookmark> {
    return await this.service.createBookmark({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bookmark)
  @nestAccessControl.UseRoles({
    resource: "Bookmark",
    action: "update",
    possession: "any",
  })
  async updateBookmark(
    @graphql.Args() args: UpdateBookmarkArgs
  ): Promise<Bookmark | null> {
    try {
      return await this.service.updateBookmark({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bookmark)
  @nestAccessControl.UseRoles({
    resource: "Bookmark",
    action: "delete",
    possession: "any",
  })
  async deleteBookmark(
    @graphql.Args() args: DeleteBookmarkArgs
  ): Promise<Bookmark | null> {
    try {
      return await this.service.deleteBookmark(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
