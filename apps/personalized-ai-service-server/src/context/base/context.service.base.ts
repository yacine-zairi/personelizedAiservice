/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Context as PrismaContext } from "@prisma/client";

export class ContextServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ContextCountArgs, "select">): Promise<number> {
    return this.prisma.context.count(args);
  }

  async contexts(args: Prisma.ContextFindManyArgs): Promise<PrismaContext[]> {
    return this.prisma.context.findMany(args);
  }
  async context(
    args: Prisma.ContextFindUniqueArgs
  ): Promise<PrismaContext | null> {
    return this.prisma.context.findUnique(args);
  }
  async createContext(args: Prisma.ContextCreateArgs): Promise<PrismaContext> {
    return this.prisma.context.create(args);
  }
  async updateContext(args: Prisma.ContextUpdateArgs): Promise<PrismaContext> {
    return this.prisma.context.update(args);
  }
  async deleteContext(args: Prisma.ContextDeleteArgs): Promise<PrismaContext> {
    return this.prisma.context.delete(args);
  }
}
