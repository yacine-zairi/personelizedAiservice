/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Context } from "./Context";
import { ContextCountArgs } from "./ContextCountArgs";
import { ContextFindManyArgs } from "./ContextFindManyArgs";
import { ContextFindUniqueArgs } from "./ContextFindUniqueArgs";
import { CreateContextArgs } from "./CreateContextArgs";
import { UpdateContextArgs } from "./UpdateContextArgs";
import { DeleteContextArgs } from "./DeleteContextArgs";
import { ContextService } from "../context.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Context)
export class ContextResolverBase {
  constructor(
    protected readonly service: ContextService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Context",
    action: "read",
    possession: "any",
  })
  async _contextsMeta(
    @graphql.Args() args: ContextCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Context])
  @nestAccessControl.UseRoles({
    resource: "Context",
    action: "read",
    possession: "any",
  })
  async contexts(
    @graphql.Args() args: ContextFindManyArgs
  ): Promise<Context[]> {
    return this.service.contexts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Context, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Context",
    action: "read",
    possession: "own",
  })
  async context(
    @graphql.Args() args: ContextFindUniqueArgs
  ): Promise<Context | null> {
    const result = await this.service.context(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Context)
  @nestAccessControl.UseRoles({
    resource: "Context",
    action: "create",
    possession: "any",
  })
  async createContext(
    @graphql.Args() args: CreateContextArgs
  ): Promise<Context> {
    return await this.service.createContext({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Context)
  @nestAccessControl.UseRoles({
    resource: "Context",
    action: "update",
    possession: "any",
  })
  async updateContext(
    @graphql.Args() args: UpdateContextArgs
  ): Promise<Context | null> {
    try {
      return await this.service.updateContext({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Context)
  @nestAccessControl.UseRoles({
    resource: "Context",
    action: "delete",
    possession: "any",
  })
  async deleteContext(
    @graphql.Args() args: DeleteContextArgs
  ): Promise<Context | null> {
    try {
      return await this.service.deleteContext(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
