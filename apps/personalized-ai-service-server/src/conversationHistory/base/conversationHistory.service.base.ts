/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ConversationHistory as PrismaConversationHistory,
} from "@prisma/client";

export class ConversationHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConversationHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.conversationHistory.count(args);
  }

  async conversationHistories(
    args: Prisma.ConversationHistoryFindManyArgs
  ): Promise<PrismaConversationHistory[]> {
    return this.prisma.conversationHistory.findMany(args);
  }
  async conversationHistory(
    args: Prisma.ConversationHistoryFindUniqueArgs
  ): Promise<PrismaConversationHistory | null> {
    return this.prisma.conversationHistory.findUnique(args);
  }
  async createConversationHistory(
    args: Prisma.ConversationHistoryCreateArgs
  ): Promise<PrismaConversationHistory> {
    return this.prisma.conversationHistory.create(args);
  }
  async updateConversationHistory(
    args: Prisma.ConversationHistoryUpdateArgs
  ): Promise<PrismaConversationHistory> {
    return this.prisma.conversationHistory.update(args);
  }
  async deleteConversationHistory(
    args: Prisma.ConversationHistoryDeleteArgs
  ): Promise<PrismaConversationHistory> {
    return this.prisma.conversationHistory.delete(args);
  }
}
