/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ConversationHistory } from "./ConversationHistory";
import { ConversationHistoryCountArgs } from "./ConversationHistoryCountArgs";
import { ConversationHistoryFindManyArgs } from "./ConversationHistoryFindManyArgs";
import { ConversationHistoryFindUniqueArgs } from "./ConversationHistoryFindUniqueArgs";
import { DeleteConversationHistoryArgs } from "./DeleteConversationHistoryArgs";
import { ConversationHistoryService } from "../conversationHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ConversationHistory)
export class ConversationHistoryResolverBase {
  constructor(
    protected readonly service: ConversationHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ConversationHistory",
    action: "read",
    possession: "any",
  })
  async _conversationHistoriesMeta(
    @graphql.Args() args: ConversationHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ConversationHistory])
  @nestAccessControl.UseRoles({
    resource: "ConversationHistory",
    action: "read",
    possession: "any",
  })
  async conversationHistories(
    @graphql.Args() args: ConversationHistoryFindManyArgs
  ): Promise<ConversationHistory[]> {
    return this.service.conversationHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ConversationHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ConversationHistory",
    action: "read",
    possession: "own",
  })
  async conversationHistory(
    @graphql.Args() args: ConversationHistoryFindUniqueArgs
  ): Promise<ConversationHistory | null> {
    const result = await this.service.conversationHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ConversationHistory)
  @nestAccessControl.UseRoles({
    resource: "ConversationHistory",
    action: "delete",
    possession: "any",
  })
  async deleteConversationHistory(
    @graphql.Args() args: DeleteConversationHistoryArgs
  ): Promise<ConversationHistory | null> {
    try {
      return await this.service.deleteConversationHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
