/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Segment } from "./Segment";
import { SegmentCountArgs } from "./SegmentCountArgs";
import { SegmentFindManyArgs } from "./SegmentFindManyArgs";
import { SegmentFindUniqueArgs } from "./SegmentFindUniqueArgs";
import { CreateSegmentArgs } from "./CreateSegmentArgs";
import { UpdateSegmentArgs } from "./UpdateSegmentArgs";
import { DeleteSegmentArgs } from "./DeleteSegmentArgs";
import { SegmentService } from "../segment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Segment)
export class SegmentResolverBase {
  constructor(
    protected readonly service: SegmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "read",
    possession: "any",
  })
  async _segmentsMeta(
    @graphql.Args() args: SegmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Segment])
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "read",
    possession: "any",
  })
  async segments(
    @graphql.Args() args: SegmentFindManyArgs
  ): Promise<Segment[]> {
    return this.service.segments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Segment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "read",
    possession: "own",
  })
  async segment(
    @graphql.Args() args: SegmentFindUniqueArgs
  ): Promise<Segment | null> {
    const result = await this.service.segment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Segment)
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "create",
    possession: "any",
  })
  async createSegment(
    @graphql.Args() args: CreateSegmentArgs
  ): Promise<Segment> {
    return await this.service.createSegment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Segment)
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "update",
    possession: "any",
  })
  async updateSegment(
    @graphql.Args() args: UpdateSegmentArgs
  ): Promise<Segment | null> {
    try {
      return await this.service.updateSegment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Segment)
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "delete",
    possession: "any",
  })
  async deleteSegment(
    @graphql.Args() args: DeleteSegmentArgs
  ): Promise<Segment | null> {
    try {
      return await this.service.deleteSegment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
