/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ComputeTask } from "./ComputeTask";
import { ComputeTaskCountArgs } from "./ComputeTaskCountArgs";
import { ComputeTaskFindManyArgs } from "./ComputeTaskFindManyArgs";
import { ComputeTaskFindUniqueArgs } from "./ComputeTaskFindUniqueArgs";
import { CreateComputeTaskArgs } from "./CreateComputeTaskArgs";
import { UpdateComputeTaskArgs } from "./UpdateComputeTaskArgs";
import { DeleteComputeTaskArgs } from "./DeleteComputeTaskArgs";
import { ComputeTaskService } from "../computeTask.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ComputeTask)
export class ComputeTaskResolverBase {
  constructor(
    protected readonly service: ComputeTaskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ComputeTask",
    action: "read",
    possession: "any",
  })
  async _computeTasksMeta(
    @graphql.Args() args: ComputeTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ComputeTask])
  @nestAccessControl.UseRoles({
    resource: "ComputeTask",
    action: "read",
    possession: "any",
  })
  async computeTasks(
    @graphql.Args() args: ComputeTaskFindManyArgs
  ): Promise<ComputeTask[]> {
    return this.service.computeTasks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ComputeTask, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ComputeTask",
    action: "read",
    possession: "own",
  })
  async computeTask(
    @graphql.Args() args: ComputeTaskFindUniqueArgs
  ): Promise<ComputeTask | null> {
    const result = await this.service.computeTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComputeTask)
  @nestAccessControl.UseRoles({
    resource: "ComputeTask",
    action: "create",
    possession: "any",
  })
  async createComputeTask(
    @graphql.Args() args: CreateComputeTaskArgs
  ): Promise<ComputeTask> {
    return await this.service.createComputeTask({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ComputeTask)
  @nestAccessControl.UseRoles({
    resource: "ComputeTask",
    action: "update",
    possession: "any",
  })
  async updateComputeTask(
    @graphql.Args() args: UpdateComputeTaskArgs
  ): Promise<ComputeTask | null> {
    try {
      return await this.service.updateComputeTask({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ComputeTask)
  @nestAccessControl.UseRoles({
    resource: "ComputeTask",
    action: "delete",
    possession: "any",
  })
  async deleteComputeTask(
    @graphql.Args() args: DeleteComputeTaskArgs
  ): Promise<ComputeTask | null> {
    try {
      return await this.service.deleteComputeTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
